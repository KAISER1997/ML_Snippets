  #AFFLINE TRANSFORMATIONS OF A SINGLE IMAGE WITH BILINEAR INTERPOLATION
#THETA-(3*2)
def Transform_Uni(img1,THETA):
 
  H, W, C = img1.shape
  x = np.linspace(-1, 1, W)
  y = np.linspace(-1,1, H)
  x_t, y_t = np.meshgrid(x, y)
  ones = np.ones(np.prod(x_t.shape))
  sampling_grid = np.vstack([x_t.flatten(), y_t.flatten(), ones])
  Transformed_grid=np.matmul(THETA,sampling_grid)
  _grids = Transformed_grid.reshape( 2, H, W)
  _grids = np.moveaxis(_grids, 0, -1)
  x_s = _grids[ :, :, 0:1].squeeze()
  y_s = _grids[ :, :, 1:2].squeeze()
  x = ((x_s + 1.) * W) * 0.5
  y = ((y_s + 1.) * H) * 0.5
  x0 = np.floor(x).astype(np.int64)
  x1 = x0 + 1
  y0 = np.floor(y).astype(np.int64)
  y1 = y0 + 1
  x0 = np.clip(x0, 0, W-1)
  x1 = np.clip(x1, 0, W-1)
  y0 = np.clip(y0, 0, H-1)
  y1 = np.clip(y1, 0, H-1)
  
  Ia = img1[ y0, x0]
  Ib =img1[ y1, x0]
  Ic =img1[ y0, x1]
  Id =img1[ y1, x1]
  wa = (x1-x) * (y1-y)
  wb = (x1-x) * (y-y0)
  wc = (x-x0) * (y1-y)
  wd = (x-x0) * (y-y0)
  wa = np.expand_dims(wa, axis=2)
  wb = np.expand_dims(wb, axis=2)
  wc = np.expand_dims(wc, axis=2)
  wd = np.expand_dims(wd, axis=2)
  out = wa*Ia + wb*Ib + wc*Ic + wd*Id
  return(out)
def array_to_img(x):
    return Image.fromarray(x.astype('uint8'), 'RGB')
c=Transform_Uni(img1,THETA)  
array_to_img(c)
